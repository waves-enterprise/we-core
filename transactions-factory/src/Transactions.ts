/**
* Generated by TxSchemeTypeScriptPlugin. DO NOT EDIT.
*/

import {
  Alias,
  ArrayOfStringsWithLength,
  AssetId,
  AtomicBadge,
  AtomicInnerTransaction,
  Base58,
  Base58WithLength,
  Base64,
  Bool,
  Byte,
  ByteArrayWithSize,
  ContractApiVersion,
  DataEntry,
  DockerParamEntry,
  Integer,
  List,
  Long,
  PermissionDueTimestamp,
  PermissionOpType,
  PermissionRole,
  Recipient,
  StringWithLength,
  Transfers,
  TxType,
  TxVersion,
  ValidationPolicy
} from '@wavesenterprise/signature-generator'
import { TRANSACTION_TYPES, TRANSACTION_VERSIONS } from './constants'
import { createTransactionsFactory, Processor } from './TransactionsFactory'


const RegisterNode = {
  tx_type: new TxType(true, TRANSACTION_TYPES.RegisterNode),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  targetPubKey: new Base58(true),
  nodeName: new StringWithLength(true),
  opType: new PermissionOpType(true),
  timestamp: new Long(true),
  fee: new Long(true)
}

const CreateAliasV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateAlias),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  alias: new Alias(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const CreateAliasV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateAlias),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  alias: new Alias(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false)
}

const IssueV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Issue),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  name: new ByteArrayWithSize(true),
  description: new ByteArrayWithSize(true, 1000),
  quantity: new Long(true),
  decimals: new Byte(true),
  reissuable: new Bool(true),
  fee: new Long(true),
  timestamp: new Long(true),
  script: new Base64(false)
}

const ReissueV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Reissue),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(true),
  quantity: new Long(true),
  reissuable: new Bool(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const BurnV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Burn),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(true),
  amount: new Long(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const LeaseV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Lease),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  assetId: new AssetId(false),
  senderPublicKey: new Base58(true),
  recipient: new Recipient(true),
  amount: new Long(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const LeaseCancelV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.LeaseCancel),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  fee: new Long(true),
  timestamp: new Long(true),
  leaseId: new AssetId(true)
}

const SponsorFee = {
  tx_type: new TxType(true, TRANSACTION_TYPES.SponsorFee),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(true),
  isEnabled: new Bool(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const SetAssetScript = {
  tx_type: new TxType(true, TRANSACTION_TYPES.SetAssetScript),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(true),
  script: new Base64(false),
  fee: new Long(true),
  timestamp: new Long(true)
}

const Data = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Data),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  authorPublicKey: new Base58(true),
  data: new List(DataEntry),
  timestamp: new Long(true),
  fee: new Long(true)
}

const DataV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Data),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  authorPublicKey: new Base58(true),
  data: new List(DataEntry),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false)
}

const TransferV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Transfer),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(false),
  feeAssetId: new AssetId(false),
  timestamp: new Long(true),
  amount: new Long(true),
  fee: new Long(true),
  recipient: new Recipient(true),
  attachment: new Base58WithLength(true, 192)
}

const TransferV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Transfer),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(false),
  feeAssetId: new AssetId(false),
  timestamp: new Long(true),
  amount: new Long(true),
  fee: new Long(true),
  recipient: new Recipient(true),
  attachment: new Base58WithLength(true, 192),
  atomicBadge: new AtomicBadge(false)
}

const MassTransfer = {
  tx_type: new TxType(true, TRANSACTION_TYPES.MassTransfer),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(false),
  transfers: new Transfers(true),
  timestamp: new Long(true),
  fee: new Long(true),
  attachment: new Base58WithLength(true, 192)
}

const MassTransferV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.MassTransfer),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  assetId: new AssetId(false),
  transfers: new Transfers(true),
  timestamp: new Long(true),
  fee: new Long(true),
  attachment: new Base58WithLength(true, 192),
  feeAssetId: new AssetId(false)
}

const Permit = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Permit),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  target: new Recipient(true),
  timestamp: new Long(true),
  fee: new Long(true),
  opType: new PermissionOpType(true),
  role: new PermissionRole(true),
  duplicate_timestamp: new Long(true),
  dueTimestamp: new PermissionDueTimestamp(false)
}

const PermitV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Permit),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  target: new Recipient(true),
  timestamp: new Long(true),
  fee: new Long(true),
  opType: new PermissionOpType(true),
  role: new PermissionRole(true),
  duplicate_timestamp: new Long(true),
  dueTimestamp: new PermissionDueTimestamp(false),
  atomicBadge: new AtomicBadge(false)
}

const CreatePolicy = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  policyName: new StringWithLength(true),
  description: new StringWithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  timestamp: new Long(true),
  fee: new Long(true)
}

const CreatePolicyV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  policyName: new StringWithLength(true),
  description: new StringWithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false)
}

const CreatePolicyV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  policyName: new StringWithLength(true),
  description: new StringWithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const UpdatePolicy = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  policyId: new Base58WithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  opType: new PermissionOpType(true),
  timestamp: new Long(true),
  fee: new Long(true)
}

const UpdatePolicyV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  policyId: new Base58WithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  opType: new PermissionOpType(true),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false)
}

const UpdatePolicyV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdatePolicy),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  policyId: new Base58WithLength(true),
  recipients: new ArrayOfStringsWithLength(true),
  owners: new ArrayOfStringsWithLength(true),
  opType: new PermissionOpType(true),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const PolicyDataHashV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.PolicyDataHash),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  dataHash: new Base58WithLength(true),
  policyId: new Base58WithLength(true),
  timestamp: new Long(true),
  fee: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const CreateContract = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  contractName: new StringWithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true)
}

const CreateContractV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  contractName: new StringWithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false)
}

const CreateContractV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  contractName: new StringWithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const CreateContractV4 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CreateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V4),
  senderPublicKey: new Base58(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  contractName: new StringWithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false),
  validationPolicy: new ValidationPolicy(true),
  apiVersion: new ContractApiVersion(true)
}

const CallContract = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CallContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true)
}

const CallContractV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CallContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  contractVersion: new Integer(true)
}

const CallContractV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CallContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  contractVersion: new Integer(true),
  feeAssetId: new AssetId(false)
}

const CallContractV4 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.CallContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V4),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  params: new List(DockerParamEntry),
  fee: new Long(true),
  timestamp: new Long(true),
  contractVersion: new Integer(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const DisableContract = {
  tx_type: new TxType(true, TRANSACTION_TYPES.DisableContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const DisableContractV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.DisableContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false)
}

const DisableContractV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.DisableContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const UpdateContract = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  fee: new Long(true),
  timestamp: new Long(true)
}

const UpdateContractV2 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V2),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false)
}

const UpdateContractV3 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V3),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false)
}

const UpdateContractV4 = {
  tx_type: new TxType(true, TRANSACTION_TYPES.UpdateContract),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V4),
  senderPublicKey: new Base58(true),
  contractId: new Base58WithLength(true),
  image: new StringWithLength(true),
  imageHash: new StringWithLength(true),
  fee: new Long(true),
  timestamp: new Long(true),
  feeAssetId: new AssetId(false),
  atomicBadge: new AtomicBadge(false),
  validationPolicy: new ValidationPolicy(true),
  apiVersion: new ContractApiVersion(true)
}

const SetScript = {
  tx_type: new TxType(true, TRANSACTION_TYPES.SetScript),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  chainId: new Byte(true),
  senderPublicKey: new Base58(true),
  script: new Base64(false),
  name: new ByteArrayWithSize(true, 128),
  description: new ByteArrayWithSize(true, 32767),
  fee: new Long(true),
  timestamp: new Long(true)
}

const Atomic = {
  tx_type: new TxType(true, TRANSACTION_TYPES.Atomic),
  version: new TxVersion(true, TRANSACTION_VERSIONS.V1),
  senderPublicKey: new Base58(true),
  transactions: new List(AtomicInnerTransaction),
  timestamp: new Long(true)
}

export const TRANSACTIONS = {
  RegisterNode: {
    V1: createTransactionsFactory(RegisterNode)
  },
  CreateAlias: {
    V2: createTransactionsFactory(CreateAliasV2),
    V3: createTransactionsFactory(CreateAliasV3)
  },
  Issue: {
    V2: createTransactionsFactory(IssueV2)
  },
  Reissue: {
    V2: createTransactionsFactory(ReissueV2)
  },
  Burn: {
    V2: createTransactionsFactory(BurnV2)
  },
  Lease: {
    V2: createTransactionsFactory(LeaseV2)
  },
  LeaseCancel: {
    V2: createTransactionsFactory(LeaseCancelV2)
  },
  SponsorFee: {
    V1: createTransactionsFactory(SponsorFee)
  },
  SetAssetScript: {
    V1: createTransactionsFactory(SetAssetScript)
  },
  Data: {
    V1: createTransactionsFactory(Data),
    V2: createTransactionsFactory(DataV2)
  },
  Transfer: {
    V2: createTransactionsFactory(TransferV2),
    V3: createTransactionsFactory(TransferV3)
  },
  MassTransfer: {
    V1: createTransactionsFactory(MassTransfer),
    V2: createTransactionsFactory(MassTransferV2)
  },
  Permit: {
    V1: createTransactionsFactory(Permit),
    V2: createTransactionsFactory(PermitV2)
  },
  CreatePolicy: {
    V1: createTransactionsFactory(CreatePolicy),
    V2: createTransactionsFactory(CreatePolicyV2),
    V3: createTransactionsFactory(CreatePolicyV3)
  },
  UpdatePolicy: {
    V1: createTransactionsFactory(UpdatePolicy),
    V2: createTransactionsFactory(UpdatePolicyV2),
    V3: createTransactionsFactory(UpdatePolicyV3)
  },
  PolicyDataHash: {
    V3: createTransactionsFactory(PolicyDataHashV3)
  },
  CreateContract: {
    V1: createTransactionsFactory(CreateContract),
    V2: createTransactionsFactory(CreateContractV2),
    V3: createTransactionsFactory(CreateContractV3),
    V4: createTransactionsFactory(CreateContractV4)
  },
  CallContract: {
    V1: createTransactionsFactory(CallContract),
    V2: createTransactionsFactory(CallContractV2),
    V3: createTransactionsFactory(CallContractV3),
    V4: createTransactionsFactory(CallContractV4)
  },
  DisableContract: {
    V1: createTransactionsFactory(DisableContract),
    V2: createTransactionsFactory(DisableContractV2),
    V3: createTransactionsFactory(DisableContractV3)
  },
  UpdateContract: {
    V1: createTransactionsFactory(UpdateContract),
    V2: createTransactionsFactory(UpdateContractV2),
    V3: createTransactionsFactory(UpdateContractV3),
    V4: createTransactionsFactory(UpdateContractV4)
  },
  SetScript: {
    V1: createTransactionsFactory(SetScript)
  },
  Atomic: {
    V1: createTransactionsFactory(Atomic)
  }
}